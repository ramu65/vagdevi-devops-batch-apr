Git bash
Git Hub account -- https://github.com/
putty
AWS account

Git ( vcs / SCM ) version control system / source code management.
 
Below are the functions of a VCS −

1. Allows developers to work simultaneously.

2. Does not allow overwriting each other’s changes.

3. Maintains a history of every version.


The Following are the types of VCS −

1. Centralized version control system (CVCS).  ===>> SVN

2. Distributed/Decentralized version control system (DVCS). ===> Git.

we will concentrate only on distributed version control system and especially on Git. Git falls under distributed version control system.

GIT ===>> alternative older VCS ==>> SVN.


Centralized version control system (CVCS) uses a central server to store all files and enables team collaboration.

 But the major drawback of CVCS is its single point of failure, i.e., failure of the central server. 

 Unfortunately, if the central server goes down for an hour, then during that hour, no one can collaborate at all.

 And even in a worst case, if the disk of the central server gets corrupted and proper backup has not been taken,

 then you will lose the entire history of the project. Here, distributed version control system (DVCS) comes into picture.

==========================================================================================================================================

DVCS clients not only check out the latest snapshot of the directory but they also fully mirror the repository.

If the server goes down, then the repository from any client can be copied back to the server to restore it. Every checkout is a full backup of the repository.

 Git does not rely on the central server and that is why you can perform many operations when you are offline.

 You can commit changes, create branches, view logs, and perform other operations when you are offline.
 
 You require network connection only to publish your changes and take the latest changes

==================================================================================================================================================

Git terminalogy :

Git is a client server architecture.

client  ===>> gitbash  and server.===>> github

repository : group of project files to store one single area and each project has one repository.==>>> github has ==>> n . no.of repositories..

cloning : remote reposiory ( myweb ) to getting the local ==>>> cloning ==>>> git clone url ( each project has one url) ===>> locally

Git terminalogy :

Git is a client server architecture.

client  ===>> gitbash  and server.===>> github

repository : group of project files to store one single area and each project has one repository.==>>> github has ==>> n . no.of repositories..

cloning : remote reposiory ( myweb ) to getting the local ==>>> cloning ==>>> git clone url ( each project has one url) ===>> locally

fork : projects are copied from one github account to another github account.

local repository : getting the remote repository ( myweb) to our local laptop. 

remote repository : github ==>> our created  repository  ( myweb )

push : sending local repository changes  to remote repository 

pull : sending the remote repository changes to the local repository

Note : git follows ===>> 2 types of protocalls ==>>> https and ssh.

=====================================================================================================

Git workflow :

1. we need to clone remote repository to local..

git clone url 

git clone https://github.com/srinivas1987devops/myweb.git

ls

2. go to the inside local repository.

cd myweb

3. files ==>>> create / modify ===>> working area.

touch rk123

git status ==>> red color ==>> working area.

4. git add . / filename / *

git status

file ==>> green color ===>> INdexing / staging area.

5. we are getting the files to local repository ==>> commit

git commit -m 'rk2020' ==>> local repository.

git log

40 digits commitiD ==>>> head ==>> head always points to latest commit.

6. push to remote repository..

git push origin master

push ==>>> sending local changes to remote repository..

origin ==>> alias name ==>>> github url

master ==>> default branch.


=========================================================================
git config --global user.name “ramakrishnaj2020”

git config --global user.email “ramakrishnaj832@gmail.com”


git push origin master ==>> githubaccountname and github passsowrd ==>>> remote.
==============================================================================

Imp concepts:

clone vs pull
pull vs fetch
pull = fetch+merge
pull vs push
